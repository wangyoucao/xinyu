package together.activity;import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import org.apache.http.client.ClientProtocolException;import org.json.JSONException;import org.json.JSONObject;import together.connectivity.JsonHandler;import together.connectivity.MySimpleAdapter;import together.connectivity.ServerResponse;import together.models.EventMsg;import together.utils.AssetsUtil;import together.utils.MyConstants;import together.widgets.PullToRefreshList;import android.app.ListActivity;import android.app.ProgressDialog;import android.content.Context;import android.content.Intent;import android.content.pm.ActivityInfo;import android.os.AsyncTask;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.util.Log;import android.view.View;import android.view.View.OnClickListener;import android.widget.AdapterView;import android.widget.Toast;import android.widget.AdapterView.OnItemClickListener;import android.widget.TextView;public class MessageListActivity extends ListActivity {	private TextView button_send;	private TextView button_followed;	private PullToRefreshList listView;	private ArrayList<HashMap<String, Object>> listArray = new ArrayList<HashMap<String, Object>>();	private HashMap<String, Object> map_use;	private MySimpleAdapter listAdapter;	private Context context;	private View loadMoreView;	private TextView loadMoreButton;	private String UID;	private String msgGet = "";	private boolean indicateMessageFollowedFlag = false;	private boolean bottomFlag = false;	private ProgressDialog progressDialog;	/**	 * 销毁activity,dismiss dialog防止窗口泄露	 * 	 * */	public void onDestroy() {		if (progressDialog != null)			progressDialog.dismiss();		super.onDestroy();	}	/**	 * 初始化activity	 * @param instance bundle	 * 	 * */	@Override	public void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.msg);		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);		// 获取UID		UID = getSharedPreferences("user", Context.MODE_PRIVATE).getString(				"uid", null);		context = this;		initUI();		try {			progressDialog.show();			build_post_list();		} catch (Exception e) {			e.printStackTrace();		}	}		/**	 * 初始化ui	 * */	private void initUI() {		listView = ((PullToRefreshList) getListView());		listView.setCacheColorHint(0);		progressDialog = new ProgressDialog(context);		progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);		progressDialog.setIcon(R.drawable.loading);		progressDialog.setMessage(getString(R.string._loading));		loadMoreView = getLayoutInflater().inflate(R.layout.loadmore, null);		loadMoreButton = (TextView) loadMoreView				.findViewById(R.id.loadMoreButton);		loadMoreButton.setText(R.string._more);		loadMoreButton.setOnClickListener(new View.OnClickListener() {			@Override			public void onClick(View v) {				loadMoreButton.setText(R.string._loading);				progressDialog.show();				new ClickGetDataTask().execute();			}		});		listView.addFooterView(loadMoreView);		listView.setOnRefreshListener(new together.widgets.PullToRefreshList.OnRefreshListener() {			@Override			public void onRefresh() {				new PullGetDataTask().execute();			}		});		button_send = (TextView) findViewById(R.id.mySendText);		button_followed = (TextView) findViewById(R.id.myFollowedText);		button_send.setOnClickListener(new OnMessagePostClickListener());		button_followed				.setOnClickListener(new OnMessageFollowedClickListener());	}	/**	 * 下拉获取数据的异步task	 * */	private class PullGetDataTask extends AsyncTask<Void, Void, String[]> {		@Override		protected String[] doInBackground(Void... params) {			// Simulates a background job.			if (indicateMessageFollowedFlag == false) {				try {					bottomFlag = false;					build_post_list();				} catch (JSONException e) {					e.printStackTrace();				} catch (IOException e) {					e.printStackTrace();				}			} else {				try {					bottomFlag = false;					build_followed_list();				} catch (JSONException e) {					e.printStackTrace();				} catch (IOException e) {					e.printStackTrace();				}			}			return null;		}		@Override		protected void onPostExecute(String[] result) {			// Call onRefreshComplete when the list has been refreshed.			((PullToRefreshList) getListView()).onRefreshComplete();			super.onPostExecute(result);			Toast.makeText(getApplicationContext(), "列表已更新", Toast.LENGTH_SHORT).show();		}	}	/**	 * asyntask , used when click load more button of list view to refresh data	 * */	private class ClickGetDataTask extends AsyncTask<Void, Void, String[]> {		@Override		protected String[] doInBackground(Void... params) {			// Simulates a background job.			bottomFlag = true;			loadMoreData(true);// add to bottom			return null;		}		@Override		protected void onPostExecute(String[] result) {			// Call onRefreshComplete when the list has been refreshed.			loadMoreButton.setText(R.string._more);			progressDialog.cancel();			Toast.makeText(getApplicationContext(), "没有更多活动了", Toast.LENGTH_SHORT).show();			super.onPostExecute(result);		}	}	/**	 * 显示信息列表的handler 	 * */	private Handler listHandler = new Handler() {// this is used to generate the		// groups list view		public void handleMessage(Message msg) {			switch (msg.what) {			case MyConstants.MSG_SUCCESS1:				@SuppressWarnings("unchecked")				final ArrayList<HashMap<String, Object>> array = (ArrayList<HashMap<String, Object>>) msg.obj;				loadMoreButton.setText(R.string._more);				listAdapter = new MySimpleAdapter(context, array,						R.layout.list_item, new String[] { "uid", "place",								"time", "type","description" },						new int[] { R.id.sItemUid, R.id.sItemPlace,								R.id.sItemTime, R.id.sItemInfo,R.id.sItemDescription }, 120);				listView.setAdapter(listAdapter);				listArray = array;				listView.setVisibility(View.GONE);				listAdapter.notifyDataSetChanged();				listView.setVisibility(View.VISIBLE);				//TODO 重复出现问题				if (bottomFlag)					listView.setSelectionFromTop(							listAdapter.GetmData().size() - 1, 150);				progressDialog.cancel();				listView.setOnItemClickListener(new OnItemClickListener() {					@Override					public void onItemClick(AdapterView<?> arg0, View arg1,							int arg2, long arg3) {						itemClick(arg2);					}					private void itemClick(int arg2) {						if (arg2 > listArray.size()) {							return;						}						Intent intent = new Intent();						if (arg2 > 0)							arg2--;						intent.putExtra("eid", (String) listArray.get(arg2)								.get("eid"));						intent.putExtra("place", (String) listArray.get(arg2)								.get("place"));						intent.putExtra("uid", (String) listArray.get(arg2)								.get("uid"));						intent.putExtra("type", (String) listArray.get(arg2)								.get("type"));						intent.putExtra("description",								(String) listArray.get(arg2).get("description"));						intent.putExtra("longitude",								(String) listArray.get(arg2).get("longitude"));						intent.putExtra("latitude", (String) listArray								.get(arg2).get("latitude"));						intent.putExtra("time", (String) listArray.get(arg2)								.get("time"));						intent.setClass(MessageListActivity.this,								FollowedMessageActivity.class);						startActivity(intent);					}				});				break;			case MyConstants.MSG_FAILURE:				progressDialog.cancel();//				if (msgGet == null || msgGet.equals("[]")) 				{										loadMoreButton.setText(R.string.no_more);//					if (bottomFlag)//						listView.setSelectionFromTop(listAdapter.GetmData()//								.size() - 1, 150);					listAdapter = new MySimpleAdapter(context, null,							R.layout.list_item, new String[] { "uid", "place",									"time", "type" },							new int[] { R.id.sItemUid, R.id.sItemTitle,									R.id.sItemTime, R.id.sItemInfo }, 120);					listView.setAdapter(listAdapter);					listArray = null;					listView.setVisibility(View.GONE);					listAdapter.notifyDataSetChanged();					listView.setVisibility(View.VISIBLE);				} //				else//					loadMoreButton.setText(R.string._more);				break;			}		}	};	private void loadMoreData(boolean bottom) {//		try {//			if (indicateMessageFollowedFlag == false)////				add_post_list(bottom);//			else//				add_followed_list(bottom);//		} catch (JSONException e) {//			e.printStackTrace();//		} catch (IOException e) {//			e.printStackTrace();//		}	}	/**	 * 创建post列表	 * @throws JSONException,IOException	 * */	private void build_post_list() throws JSONException, IOException {		final ArrayList<HashMap<String, Object>> Array = new ArrayList<HashMap<String, Object>>();		new Thread() {			public void run() {				String s = null;				try {					JSONObject jo = new JSONObject();					//TODO 添加真实的用户信息					jo.put("startUid", UID);					jo.put("followUid", "0");					/*从服务器获取event信息*/					String url = MyConstants.SITE + getString(R.string.ListFollowEvent);					Log.i("together", "befor http");					s = ServerResponse.getResponse(url, jo);					Log.i("together", "after http");					if (s == null) {						msgGet = s;						listHandler.obtainMessage(MyConstants.MSG_FAILURE)								.sendToTarget();						return;					}					if (s.equals("[]")) {						// 说明没有更多新闻了，此时msgGet="[]"						msgGet = s;						listHandler.obtainMessage(MyConstants.MSG_FAILURE)								.sendToTarget();						return;					}					JsonHandler jsonHandler = new JsonHandler();//					System.out.println("s = " + s);					List<EventMsg> msgs = jsonHandler.getEventMessages(s, "event");					HashMap<String, Object> map;					for (EventMsg p : msgs) {						map = getMapForShow(p);						Array.add(map);					}				} catch (JSONException e) {					listHandler.obtainMessage(MyConstants.MSG_FAILURE)							.sendToTarget();					e.printStackTrace();					Log.i("together", e.toString());				} catch (ClientProtocolException e) {					e.printStackTrace();					Log.i("together", e.toString());				} catch (IOException e) {					e.printStackTrace();					Log.i("together", e.toString());				}				if (Array.size() == 0) {					Log.i("together", "build fail");					listHandler.obtainMessage(MyConstants.MSG_FAILURE)							.sendToTarget();				} else {					Log.i("together", "build success");					listHandler.obtainMessage(MyConstants.MSG_SUCCESS1, Array)							.sendToTarget();				}			}		}.start();	}	/**	 * 从eventMSg中获得map	 * @param p EventMsg	 * @return map HashMap<String,Object>	 * */	private HashMap<String, Object> getMapForShow(EventMsg p) {		HashMap<String, Object> map;		map = new HashMap<String, Object>();		map.put("eid", p.getEid());		map.put("place", p.getPlace());		map.put("uid", p.getUid());		map.put("type",  p.getType());		map.put("description",  p.getDescription());		map.put("longitude", p.getLongitude());		map.put("latitude",  p.getLatitude());		map.put("time", p.getStartTime());		return map;	}	private void add_post_list(final boolean bottom) throws JSONException,			IOException {		String s = null;		s = AssetsUtil.getFromAssets(context, "star.json");		if (s == null) {			Log.d("MessagePostActivity", "null response");			msgGet = s;			listHandler.obtainMessage(MyConstants.MSG_FAILURE).sendToTarget();			return;		}		if (s.equals("[]")) {			// 说明没有更多新闻了，此时msgGet="[]"			msgGet = s;			listHandler.obtainMessage(MyConstants.MSG_FAILURE).sendToTarget();			return;		}		JsonHandler jsonHandler = new JsonHandler();		List<EventMsg> stars = jsonHandler.getMessages(s);		ArrayList<HashMap<String, Object>> array = new ArrayList<HashMap<String, Object>>();		if (listAdapter!=null && listAdapter.GetmData() != null) {			for (int i = 0; i < listAdapter.GetmData().size(); i++)				array.add(listAdapter.GetmData().get(i));			for (EventMsg p : stars) {				map_use = getMapForShow(p);				array.add(map_use);			}			// last_star_id += stars.size();			if (stars.size() == 0) {				listHandler.obtainMessage(MyConstants.MSG_FAILURE)						.sendToTarget();			} else {				listHandler.obtainMessage(MyConstants.MSG_SUCCESS1, array)						.sendToTarget();			}		}	}	/**	 * 创建跟踪者列表	 * @throws JSONException,IOException	 * */	private void build_followed_list() throws JSONException, IOException {		final ArrayList<HashMap<String, Object>> Array = new ArrayList<HashMap<String, Object>>();		new Thread() {			public void run() {				String s = null;				try {					JSONObject jo = new JSONObject();					//TODO 添加真实的用户信息					jo.put("startUid", "0");					jo.put("followUid", UID);					/*从服务器获取event信息*/					String url = MyConstants.SITE + getString(R.string.ListFollowEvent);					Log.i("together", "befor http");					s = ServerResponse.getResponse(url, jo);					Log.i("together", "after http");					if (s == null) {						msgGet = s;						listHandler.obtainMessage(MyConstants.MSG_FAILURE)								.sendToTarget();						return;					}					if (s.equals("[]")) {						// 说明没有更多新闻了，此时msgGet="[]"						msgGet = s;						listHandler.obtainMessage(MyConstants.MSG_FAILURE)								.sendToTarget();						return;					}					JsonHandler jsonHandler = new JsonHandler();//					System.out.println("s = " + s);					List<EventMsg> msgs = jsonHandler.getEventMessages(s, "event");					HashMap<String, Object> map;					for (EventMsg p : msgs) {						map = getMapForShow(p);						Array.add(map);					}				} catch (JSONException e) {					listHandler.obtainMessage(MyConstants.MSG_FAILURE)							.sendToTarget();					e.printStackTrace();					Log.i("together", e.toString());				} catch (ClientProtocolException e) {					e.printStackTrace();					Log.i("together", e.toString());				} catch (IOException e) {					e.printStackTrace();					Log.i("together", e.toString());				}				if (Array.size() == 0) {					Log.i("together", "build fail");					listHandler.obtainMessage(MyConstants.MSG_FAILURE)							.sendToTarget();				} else {					Log.i("together", "build success");					listHandler.obtainMessage(MyConstants.MSG_SUCCESS1, Array)							.sendToTarget();				}			}		}.start();	}	private void add_followed_list(final boolean bottom) throws JSONException,			IOException {	}	/**	 * 点击post按钮，创建pos列表	 * */	class OnMessagePostClickListener implements OnClickListener {		public void onClick(View v) {			try {				loadMoreButton.setText("查看更多...");				bottomFlag = false;				progressDialog.show();				build_post_list();				indicateMessageFollowedFlag = false;			} catch (JSONException e) {				e.printStackTrace();			} catch (IOException e) {				e.printStackTrace();			}		}	};	/**	 * 点击follow按钮，创建follow列表	 * */	private class OnMessageFollowedClickListener implements OnClickListener {		public void onClick(View v) {			try {				loadMoreButton.setText(R.string._more);				bottomFlag = false;				progressDialog.show();				build_followed_list();				indicateMessageFollowedFlag = true;			} catch (JSONException e) {				e.printStackTrace();			} catch (IOException e) {				e.printStackTrace();			}		}	};}
