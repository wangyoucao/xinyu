package together.activity;import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import org.apache.http.client.ClientProtocolException;import org.json.JSONException;import org.json.JSONObject;import together.connectivity.JsonHandler;import together.connectivity.MySimpleAdapter;import together.connectivity.ServerResponse;import together.models.UserMsg;import together.utils.MyConstants;import together.widgets.PullToRefreshList;import android.app.ListActivity;import android.app.ProgressDialog;import android.content.Context;import android.content.Intent;import android.content.pm.ActivityInfo;import android.os.AsyncTask;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.util.Log;import android.view.View;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.TextView;import android.widget.Toast;public class FriendActivity extends ListActivity {	private MySimpleAdapter listAdapter;	private ProgressDialog progressDialog; 	private Context context;	private View loadMoreView;	private TextView loadMoreButton;	private PullToRefreshList listView;	private ArrayList<HashMap<String, Object>> listArray = new ArrayList<HashMap<String, Object>>(); 	private String UID;	private String msgGet = "";		/**	 * activity被销毁时，将dialog dismiss掉，防止窗口泄露	 * */	public void onDestroy() {		if (progressDialog != null)			progressDialog.dismiss();		 		super.onDestroy();	}	/**	 * 初始化activity	 * @param instance Bundle	 * */	@Override	public void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.friend);		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);		//获取UID		UID = getSharedPreferences("user", Context.MODE_PRIVATE).getString("uid", null);  		context = this;		listView = ((PullToRefreshList) getListView());		listView.setCacheColorHint(0);		progressDialog = new ProgressDialog(context);		progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);		progressDialog.setIcon(R.drawable.loading);		progressDialog.setMessage(getString(R.string._loading));		 		loadMoreView = getLayoutInflater().inflate(R.layout.loadmore, null);		loadMoreButton = (TextView) loadMoreView				.findViewById(R.id.loadMoreButton);		loadMoreButton.setText(R.string._more);		loadMoreButton.setOnClickListener(new View.OnClickListener() {			@Override			public void onClick(View v) {				loadMoreButton.setText(R.string._loading);				progressDialog.show();				new ClickGetDataTask().execute();			}		});		listView.addFooterView(loadMoreView);		listView.setOnRefreshListener(new together.widgets.PullToRefreshList.OnRefreshListener() {			@Override			public void onRefresh() {				new PullGetDataTask().execute();			}		});		try {			progressDialog.show();			buildlist();		} catch (Exception e) {			e.printStackTrace();		}	}	/**	 * 用于获取好友列表的异步task	 * */	private class PullGetDataTask extends AsyncTask<Void, Void, String[]> {		@Override		protected String[] doInBackground(Void... params) {			// Simulates a background job. 				try { 					buildlist();				} catch (JSONException e) {					e.printStackTrace();				} catch (IOException e) {					e.printStackTrace();				}			 			return null;		}		@Override		protected void onPostExecute(String[] result) {			// Call onRefreshComplete when the list has been refreshed.			((PullToRefreshList) getListView()).onRefreshComplete();			super.onPostExecute(result);			Toast.makeText(getApplicationContext(), "列表已更新", Toast.LENGTH_SHORT).show();		}	}		/**	 * 用于点击获取好友信息的异步task	 * */	private class ClickGetDataTask extends AsyncTask<Void, Void, String[]> {		@Override		protected String[] doInBackground(Void... params) {			// Simulates a background job.			loadMoreData(true);// add to bottom			return null;		}		@Override		protected void onPostExecute(String[] result) {			// Call onRefreshComplete when the list has been refreshed.			loadMoreButton.setText(R.string._more);			progressDialog.cancel();			Toast.makeText(getApplicationContext(), "没有更多用户了", Toast.LENGTH_SHORT).show();			super.onPostExecute(result);		}	}	/**	 * 用于显示好友列表的Handler	 * */	private Handler listHandler = new Handler() {// this is used to generate the													// groups listview		public void handleMessage(Message msg) {			switch (msg.what) {			case MyConstants.MSG_SUCCESS1:				@SuppressWarnings("unchecked")				final ArrayList<HashMap<String, Object>> array = (ArrayList<HashMap<String, Object>>) msg.obj;				loadMoreButton.setText(R.string._more);				listAdapter = new MySimpleAdapter(context, array,						R.layout.friend_item, new String[] { "uid",								 }, new int[] {								R.id.sItemTitle },						120);				listView.setAdapter(listAdapter);				listArray = array;				listView.setVisibility(View.GONE);				listAdapter.notifyDataSetChanged();				listView.setVisibility(View.VISIBLE); 				progressDialog.cancel();				listView.setOnItemClickListener(new OnItemClickListener() {					@Override					public void onItemClick(AdapterView<?> arg0, View arg1,							int arg2, long arg3) {						if (arg2 > listArray.size()) {							return;						}						Intent intent = new Intent();						if (arg2 > 0)							arg2--;						intent.putExtra("uid",								(String) listArray.get(arg2).get("uid"));						 					}				});				break;			case MyConstants.MSG_FAILURE:				progressDialog.cancel(); 				if (msgGet == null || msgGet.equals("[]")) {					loadMoreButton.setText(R.string.no_more);//					 				} else					loadMoreButton.setText(R.string._more);				break;			}		}	};		private void loadMoreData(boolean bottom) {//		try {////			add_list(bottom);////		} catch (JSONException e) {//			e.printStackTrace();//		} catch (IOException e) {//			e.printStackTrace();//		}	}		/**	 * 从服务器获取信息来创建好友列表	 * */	private void buildlist() throws JSONException, IOException {		final ArrayList<HashMap<String, Object>> Array = new ArrayList<HashMap<String, Object>>();		new Thread() {			public void run() {				String s = null;				try {					JSONObject jo = new JSONObject();					//TODO 添加真实的用户信息					jo.put("uid", UID);					jo.put("radius", "0");					/*从服务器获取user信息*/					String url = MyConstants.SITE + getString(R.string.ListUser);					Log.i("together", "befor http");					s = ServerResponse.getResponse(url, jo);					Log.i("together", "after http");					if (s == null) {						msgGet = s;						listHandler.obtainMessage(MyConstants.MSG_FAILURE)								.sendToTarget();						return;					}					if (s.equals("[]")) {						// 说明没有更多新闻了，此时msgGet="[]"						msgGet = s;						listHandler.obtainMessage(MyConstants.MSG_FAILURE)								.sendToTarget();						return;					}					JsonHandler jsonHandler = new JsonHandler();					List<UserMsg> msgs = jsonHandler.getUserMessages(s, "user");					HashMap<String, Object> map;					for (UserMsg p : msgs) {						map = getMapForShow(p);						Array.add(map);					}				} catch (JSONException e) {					listHandler.obtainMessage(MyConstants.MSG_FAILURE)							.sendToTarget();					e.printStackTrace();					Log.i("together", e.toString());				} catch (ClientProtocolException e) {					e.printStackTrace();					Log.i("together", e.toString());				} catch (IOException e) {					e.printStackTrace();					Log.i("together", e.toString());				}				if (Array.size() == 0) {					Log.i("together", "build fail");					listHandler.obtainMessage(MyConstants.MSG_FAILURE)							.sendToTarget();				} else {					Log.i("together", "build success");					listHandler.obtainMessage(MyConstants.MSG_SUCCESS1, Array)							.sendToTarget();				}			}		}.start();	}	/**	 * 从UserMsg对象中返回map	 * @param p UserMap	 * @return map HashMap<String,Object>	 * */	private HashMap<String, Object> getMapForShow(UserMsg p) {		HashMap<String, Object> map;		map = new HashMap<String, Object>();		String uid = p.getUid();		map.put("uid", uid); 		return map;	}}
