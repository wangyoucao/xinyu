package com.krislq.sliding.fragment;import java.io.BufferedInputStream;import java.io.IOException;import java.io.InputStream;import java.net.MalformedURLException;import java.net.URL;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import org.apache.http.client.ClientProtocolException;import org.json.JSONException;import org.json.JSONObject;import org.springframework.http.ContentCodingType;import org.springframework.http.HttpEntity;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpMethod;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.util.LinkedMultiValueMap;import org.springframework.util.MultiValueMap;import org.springframework.web.client.RestTemplate;import together.activity.R;import together.activity.SendActivity;import together.activity.TogetherApp;import together.connectivity.JsonHandler;import together.connectivity.ServerResponse;import together.models.EventMsg;import together.models.Huodong;import together.utils.MyConstants;import together.utils.MyLocation;import together.widgets.PullToRefreshList;import android.annotation.SuppressLint;import android.app.AlertDialog;import android.app.ProgressDialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.location.Location;import android.location.LocationManager;import android.os.AsyncTask;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.v4.app.ListFragment;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.BaseAdapter;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import com.baidu.location.BDLocation;import com.baidu.location.BDLocationListener;import com.baidu.location.LocationClient;@SuppressLint("ParserError")public class HomeFragment extends ListFragment {	private ContentAdapter listAdapter;	private ProgressDialog progressDialog;	private Context context;	private View loadMoreView;	private TextView loadMoreButton;	private TextView sendText;	private PullToRefreshList listView;	private ArrayList<HashMap<String, Object>> listArray = new ArrayList<HashMap<String, Object>>();	// private HashMap<String, Object> map_use;	private boolean bottomFlag = false;	private LocationClient locationClient;	private String UID;	private String msgGet = "";	LayoutInflater inflator;	List<EventMsg> msgs ;	private TextView eventPeriod;	private TextView eventType;	private TextView eventLocation;	private int curEventPeriodPos;	private int curEventType;	private int curEventLoc;	View view;	/**	 * 销毁activity时，dismiss掉dialog，防止窗口泄露	 * */	public void onDestroy() {		if (progressDialog != null)			progressDialog.dismiss();		super.onDestroy();	}	/**	 * 创建activity	 * 	 * @param instance	 *            Bundle	 * */	@Override	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		this.inflator = inflater;				view= inflater.inflate(R.layout.home, container, false);		sendText = (TextView) view.findViewById(R.id.sendText);		return view;	}				@Override	public void onActivityCreated(Bundle savedInstanceState) {				super.onActivityCreated(savedInstanceState);		// 获取UID				UID = this.getActivity().getSharedPreferences("user", Context.MODE_PRIVATE).getString(						"uid", null);				context = this.getActivity();				initUI(inflator);				locationClient = TogetherApp.getLocationClient();				locationClient.registerLocationListener(new HomeLocationListener());				try {					progressDialog.show();					// 载入界面时向服务器更新自己的位置					//new SendLocation().execute();					if (locationClient != null && locationClient.isStarted())						locationClient.requestLocation();					else						Log.d("LocSDK3", "locClient is null or not started");//										buildlist();				} catch (Exception e) {					e.printStackTrace();				}								// locationClient.s	}	/**	 * 初始化UI界面	 * */	private void initUI(LayoutInflater inflat) {		listView = ((PullToRefreshList) getListView());		listView.setCacheColorHint(0);		listAdapter = new ContentAdapter(this.context,listArray);		listView.setAdapter(listAdapter);						progressDialog = new ProgressDialog(context);		progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);		progressDialog.setIcon(R.drawable.loading);		progressDialog.setMessage(getString(R.string._loading));		loadMoreView = inflat.inflate(R.layout.loadmore, null);		loadMoreButton = (TextView) loadMoreView				.findViewById(R.id.loadMoreButton);		loadMoreButton.setText(R.string._more);				sendText.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				Intent itent = new Intent(HomeFragment.this.getActivity(),SendActivity.class);				startActivity(itent);			}		});		loadMoreButton.setOnClickListener(new View.OnClickListener() {			@Override			public void onClick(View v) {				loadMoreButton.setText(R.string._loading);				progressDialog.show();				new ClickGetDataTask().execute();			}		});		listView.addFooterView(loadMoreView);		listView.setOnRefreshListener(new together.widgets.PullToRefreshList.OnRefreshListener() {			@Override			public void onRefresh() {				new PullGetDataTask().execute();				/* 每次刷新时像服务器更新自己的位置 */				// new SendLocation().execute();				if (locationClient != null && locationClient.isStarted())					locationClient.requestLocation();				else					Log.d("LocSDK3", "locClient is null or not started");			}		});				eventPeriod = (TextView) view.findViewById(R.id.tv_eventPeriod);		eventPeriod.setOnClickListener(new OnClickListener(){			@Override			public void onClick(View v) {				final  String[] eventlist = context.getResources().getStringArray(R.array.events_period_name);				new AlertDialog.Builder(context).setItems(eventlist, new DialogInterface.OnClickListener()			      {			        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)			        {			          HomeFragment.this.curEventPeriodPos = paramAnonymousInt;			          HomeFragment.this.eventPeriod.setText(eventlist[paramAnonymousInt]);			          new PostMessageTask();			          			        }			      }).create().show();							}					});		eventType = (TextView) view.findViewById(R.id.tv_eventCategory);		eventType.setOnClickListener(new OnClickListener(){			@Override			public void onClick(View v) {				final  String[] eventlist = context.getResources().getStringArray(R.array.events_type_name);				new AlertDialog.Builder(context).setItems(eventlist, new DialogInterface.OnClickListener()			      {			        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)			        {			          HomeFragment.this.curEventType = paramAnonymousInt;			          HomeFragment.this.eventType.setText(eventlist[paramAnonymousInt]);			          new PostMessageTask();			          			        }			      }).create().show();							}					});				eventLocation = (TextView) view.findViewById(R.id.tv_eventLoc);		eventLocation.setOnClickListener(new OnClickListener(){			@Override			public void onClick(View v) {				final  String[] eventlist = context.getResources().getStringArray(R.array.events_type_name);				new AlertDialog.Builder(context).setItems(eventlist, new DialogInterface.OnClickListener()			      {			        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)			        {			          HomeFragment.this.curEventType = paramAnonymousInt;			          HomeFragment.this.eventType.setText(eventlist[paramAnonymousInt]);			          new PostMessageTask();			          			        }			      }).create().show();							}					});			}			/**	 * 向服务器更新自己的位置，异步task	 * 	 * @author hElo	 * 	 */	private class SendLocation extends AsyncTask<Void, Void, Boolean> {		protected Boolean doInBackground(Void... params) {			LocationManager locationManager = (LocationManager)context.getSystemService(Context.LOCATION_SERVICE);			Location location = new MyLocation(locationManager).getLoaction();			String longitude = Double.toString(location.getLongitude());			String latitude = Double.toString(location.getLatitude());			String uid = UID;			String url = MyConstants.SITE					+ getString(R.string.UpdateUserLocation);			JSONObject json = new JSONObject();			try {				json.put("uid", uid);				json.put("longitude", longitude);				json.put("latitude", latitude);			} catch (JSONException e) {				e.printStackTrace();			}			String result = null;			try {				result = ServerResponse.getResponse(url, json);			} catch (ClientProtocolException e) {				e.printStackTrace();			} catch (IOException e) {				e.printStackTrace();			}			if (result.contains("success"))				return true;			else				return false;		}		protected void onPostExecute(Boolean result) {			 if(result)			 Toast.makeText(context, "send location success",			 Toast.LENGTH_SHORT).show();			 else			 Toast.makeText(context, "send location fail",			 Toast.LENGTH_SHORT).show();		}	}	/**	 * 获取事件列表信息的异步task	 * */	private class PullGetDataTask extends AsyncTask<Void, Void, String[]> {		@Override		protected String[] doInBackground(Void... params) {			try {				bottomFlag = false;				buildlist();			} catch (JSONException e) {				e.printStackTrace();			} catch (IOException e) {				e.printStackTrace();			}			return null;		}		@Override		protected void onPostExecute(String[] result) {			// Call onRefreshComplete when the list has been refreshed.			((PullToRefreshList) getListView()).onRefreshComplete();			super.onPostExecute(result);			Toast.makeText(context, "列表已更新", Toast.LENGTH_SHORT)					.show();		}	}	/**	 * async task , used when click load more button of list view to refresh	 * data	 * */	private class ClickGetDataTask extends AsyncTask<Void, Void, String[]> {		@Override		protected String[] doInBackground(Void... params) {			// Simulates a background job.			bottomFlag = true;			 loadMoreData(true);// add to bottom			return null;		}		@Override		protected void onPostExecute(String[] result) {			// Call onRefreshComplete when the list has been refreshed.			loadMoreButton.setText(R.string._more);			progressDialog.cancel();			Toast.makeText(context, "没有更多活动了",					Toast.LENGTH_SHORT).show();			super.onPostExecute(result);		}	}	/**	 * 用于显示事件列表的UIHandler	 * */	private Handler listHandler = new Handler() {// this is used to generate the													// groups listview		public void handleMessage(Message msg) {			switch (msg.what) {			case MyConstants.MSG_SUCCESS1:				@SuppressWarnings("unchecked")				final ArrayList<HashMap<String, Object>> array = (ArrayList<HashMap<String, Object>>) msg.obj;				loadMoreButton.setText(R.string._more);												listArray = array;				listView.setVisibility(View.GONE);				listAdapter.notifyDataSetChanged();				listView.setVisibility(View.VISIBLE);				if (bottomFlag)					listView.setSelectionFromTop(							listArray.size() - 1, 150);				progressDialog.cancel();				listView.setOnItemClickListener(new OnItemClickListener() {					@Override					public void onItemClick(AdapterView<?> arg0, View arg1,							int arg2, long arg3) {						itemClick(arg2);					}					private void itemClick(int arg2) {						if (arg2 > listArray.size()) {							return;						}						Intent intent = new Intent();						if (arg2 > 0)							arg2--;						intent.putExtra("eid", (String) listArray.get(arg2)								.get("eid"));						intent.putExtra("place", (String) listArray.get(arg2)								.get("place"));						intent.putExtra("uid", (String) listArray.get(arg2)								.get("uid"));						intent.putExtra("type", (String) listArray.get(arg2)								.get("type"));						intent.putExtra("description",								(String) listArray.get(arg2).get("description"));						intent.putExtra("longitude",								(String) listArray.get(arg2).get("longitude"));						intent.putExtra("latitude", (String) listArray								.get(arg2).get("latitude"));						intent.putExtra("time", (String) listArray.get(arg2)								.get("time"));						intent.setClass(HomeFragment.this.getActivity(),								SendActivity.class);						startActivity(intent);					}				});				break;			case MyConstants.MSG_FAILURE:				progressDialog.cancel();				if (msgGet == null || msgGet.equals("[]")) {					loadMoreButton.setText(R.string.no_more);					if (bottomFlag)						listView.setSelectionFromTop(listArray								.size() - 1, 150);				} else					loadMoreButton.setText(R.string._more);				break;			}		}	};	 private void loadMoreData(boolean bottom) {	 try {	   add_list(bottom);		 } catch (JSONException e) {	 e.printStackTrace();	 } catch (IOException e) {	 e.printStackTrace();	 }	 }	/**	 * 创建事件列表，从服务器获取数据	 * */	private void buildlist() throws JSONException, IOException {		final ArrayList<HashMap<String, Object>> Array = new ArrayList<HashMap<String, Object>>();				//getRequestParams();		new Thread() {			public void run() {				String s = null;				try {					JSONObject jo = new JSONObject();					// TODO 添加真实的用户信息					jo.put("uid", UID);					jo.put("radius", "0");					/* 从服务器获取event信息 */					String url = MyConstants.SITE							+ getString(R.string.ListEvent);					Log.i("together", "befor http");					s = ServerResponse.getResponse(url, jo);					Log.i("together", "after http");					if (s == null) {						msgGet = s;						listHandler.obtainMessage(MyConstants.MSG_FAILURE)								.sendToTarget();						return;					}					if (s.equals("[]")) {						// 说明没有更多新闻了，此时msgGet="[]"						msgGet = s;						listHandler.obtainMessage(MyConstants.MSG_FAILURE)								.sendToTarget();						return;					}					JsonHandler jsonHandler = new JsonHandler();					msgs = jsonHandler.getEventMessages(s,							"event");					HashMap<String, Object> map;					if(msgs.size()<3){						for (EventMsg p : msgs) {							map = getMapForShow(p);							Array.add(map);						}					}else{						for(int i =0 ;i<3 ; i++ ){							EventMsg p = msgs.get(i);							map = getMapForShow(p);						    Array.add(map);						}					}									} catch (JSONException e) {					listHandler.obtainMessage(MyConstants.MSG_FAILURE)							.sendToTarget();					e.printStackTrace();					Log.i("together", e.toString());				} catch (ClientProtocolException e) {					e.printStackTrace();					Log.i("together", e.toString());				} catch (IOException e) {					e.printStackTrace();					Log.i("together", e.toString());				}				if (Array.size() == 0) {					Log.i("together", "build fail");					listHandler.obtainMessage(MyConstants.MSG_FAILURE)							.sendToTarget();				} else {					Log.i("together", "build success");					listHandler.obtainMessage(MyConstants.MSG_SUCCESS1, Array)							.sendToTarget();				}			}		}.start();	}	/**	 * 从EventMsg中获取map	 * 	 * @param p	 *            EventMsg	 * @return map HashMap<String,Object>	 * */	private HashMap<String, Object> getMapForShow(EventMsg p) {		HashMap<String, Object> map;		map = new HashMap<String, Object>();		map.put("eid", p.getEid());		map.put("place", p.getPlace());		map.put("uid", p.getUid());		map.put("type", p.getType());		map.put("description", p.getDescription());		map.put("longitude", p.getLongitude());		map.put("latitude", p.getLatitude());		map.put("time", p.getStartTime());		return map;	}	 private void add_list(final boolean bottom) throws JSONException,	 IOException {	 	 if (msgs == null) {	   Log.d("StarActivity", "null response");	   	   listHandler.obtainMessage(MyConstants.MSG_FAILURE).sendToTarget();	   return;	 }	 	 	 List<HashMap<String, Object>> array = listArray;  	 	 int begin = array.size();	 int len = begin+2;	 int msgSize =msgs.size();	 if(len<msgSize){		for (int i=begin;i< len ; i++) {			EventMsg p = msgs.get(i);			array.add(getMapForShow(p));		}	 }else{		 for (int i=begin;i< msgSize ; i++) {				EventMsg p = msgs.get(i);				array.add(getMapForShow(p)); 	 }	 	 }	 // last_id += msgs.size();	 if (msgs.size() == 0) {	 listHandler.obtainMessage(MyConstants.MSG_FAILURE).sendToTarget();	 } else {	 listHandler.obtainMessage(MyConstants.MSG_SUCCESS1, array)	 .sendToTarget();	 }	 }	public class HomeLocationListener implements BDLocationListener {		@Override		public void onReceiveLocation(BDLocation location) {			if (location == null) {				Log.d("HOmeActivity Location",						"can not get location information");				return;			}//			String longitude = Double.toString(location.getLongitude());//			String latitude = Double.toString(location.getLatitude());//			String uid = UID;//			String url = MyConstants.SITE//					+ getString(R.string.UpdateUserLocation);//			JSONObject json = new JSONObject();//			try {//				json.put("uid", uid);//				json.put("longitude", longitude);//				json.put("latitude", latitude);//			} catch (JSONException e) {//				e.printStackTrace();//			}//			String result = "";//			try {//				result = ServerResponse.getResponse(url, json);//			} catch (ClientProtocolException e) {//				Log.d(this.toString(), " update the location error"+e);//			} catch (Exception e) {//				Log.d(this.toString(), "update the location error"+e);//			}//			//			Log.d(this.toString(), result);			// logMsg(sb.toString());		}		public void onReceivePoi(BDLocation poiLocation) {			if (poiLocation == null) {				return;			}			StringBuffer sb = new StringBuffer(256);			sb.append("Poi time : ");			sb.append(poiLocation.getTime());			sb.append("\nerror code : ");			sb.append(poiLocation.getLocType());			sb.append("\nlatitude : ");			sb.append(poiLocation.getLatitude());			sb.append("\nlontitude : ");			sb.append(poiLocation.getLongitude());			sb.append("\nradius : ");			sb.append(poiLocation.getRadius());			if (poiLocation.getLocType() == BDLocation.TypeNetWorkLocation) {				sb.append("\naddr : ");				sb.append(poiLocation.getAddrStr());			}			if (poiLocation.hasPoi()) {				sb.append("\nPoi:");				sb.append(poiLocation.getPoi());			} else {				sb.append("noPoi information");			}			// logMsg(sb.toString());		}	}	/**	 * 当activity被唤醒时，重新start locationClient	 * */	public void onResume() {		super.onResume();		locationClient.start();	}	/**	 * 当activity被暂停时，关闭locationClient	 * */	public void onPause() {		super.onPause();		locationClient.stop();	}		public class ContentAdapter extends BaseAdapter {		private LayoutInflater mInflater;				private ViewHolder holder;		public ContentAdapter(Context context, List<HashMap<String, Object>> list) {			mInflater = LayoutInflater.from(context);					}		@Override		public int getCount() {			return HomeFragment.this.listArray.size();		}		@Override		public Object getItem(int position) {			return HomeFragment.this.listArray.get(position);		}		@Override		public long getItemId(int position) {			return position;		}		@Override		public View getView(final int position, View convertView,				ViewGroup parent) {			if (convertView == null) {				convertView = mInflater.inflate(R.layout.event_listitem, null);				holder = new ViewHolder();								holder.itemUid = (TextView) convertView.findViewById(R.id.sItemUid);				holder.itemPlace = (TextView) convertView.findViewById(R.id.sItemPlace);				holder.itemTime = (TextView) convertView.findViewById(R.id.sItemTime);				holder.itemInfo = (TextView) convertView.findViewById(R.id.sItemInfo);				holder.itemDescription = (TextView) convertView.findViewById(R.id.sItemDescription);												convertView.setTag(holder);			} else {				holder = (ViewHolder) convertView.getTag();			}			// holder.index.setText((String) items.get(position).getIndex());//			holder.itemUid.setText((String) listArray.get(position).get("UID") + "");//			holder.itemPlace.setText((String) listArray.get(position).get("Place") + "");//			holder.itemTime.setText((String) listArray.get(position).get("Time")//					+ "");//			holder.itemInfo.setText((String) listArray.get(position).get("Info"));//			holder.itemDescription.setText((String) listArray.get(position).get("Description"));						return convertView;		}		/* class ViewHolder */		private class ViewHolder {			TextView itemUid;			TextView itemPlace;			TextView itemTime;			TextView itemInfo;			TextView itemDescription;			ImageView icon;		}	}	private Bitmap getBitmapFromUrl(String imgUrl) {		URL url;		Bitmap bitmap = null;		try {			url = new URL(imgUrl);			InputStream is = url.openConnection().getInputStream();			BufferedInputStream bis = new BufferedInputStream(is);			bitmap = BitmapFactory.decodeStream(bis);			bis.close();		} catch (MalformedURLException e) {			e.printStackTrace();		} catch (IOException e) {			e.printStackTrace();		}		return bitmap;	}	//	private HashMap<String, String> getRequestParams() {//		HashMap<String, String> map = new HashMap<String, String>();//////		Spinner s1 = (Spinner)this.getActivity().findViewById(R.id.spinner1);////		Spinner s2 = (Spinner) this.getActivity().findViewById(R.id.spinner2);////		Spinner s3 = (Spinner) this.getActivity().findViewById(R.id.spinner3);////		//ToggleButton toggleButton = (ToggleButton)this.getActivity(). findViewById(R.id.toggleButton1);////		try {//			map.put("region", URLEncoder.encode("北京", "utf-8"));////			String filter = "";////			//if (toggleButton.isChecked()) {////				// 附件，周边搜索////				RadioGroup filter2 = (RadioGroup) this.getActivity().findViewById(R.id.filter2);////				RadioButton rb = (RadioButton) this.getActivity().findViewById(filter2////						.getCheckedRadioButtonId());////				String radius = rb.getText().toString();////				radius = radius.substring(0, radius.length() - 1);////				map.put("radius", radius);////				TogetherApp app = (TogetherApp)TogetherApp.getInstance();//				if (app.currlocation != null) {//					map.put("location", app.currlocation.getLatitude() + ","//							+ app.currlocation.getLongitude());//				} else {//					// 无定位数据默认北京中心//					double cLat = 39.909230;//					double cLon = 116.397428;//					map.put("location", cLat + "," + cLon);//				}//			//} else {//				// 筛选，本地搜索//				if (s1.getSelectedItemPosition() > 0) {//					String s1String = s1.getSelectedItem().toString();//					map.put("q", URLEncoder.encode(s1String, "utf-8"));//				}////				if (s2.getSelectedItemPosition() > 0) {//					String s2String = s2.getSelectedItem().toString();//					String[] priceArray = context.getResources()//							.getStringArray(R.array.events_type_name);//					for (int i = 0; i < priceArray.length; i++) {//						if (s2String.equals(priceArray[i])) {//							if (i == priceArray.length - 1) {//								filter = filter//										+ URLEncoder.encode("|", "utf-8")//										+ "dayprice_section:" + (i - 1) * 50//										+ URLEncoder.encode(",", "utf-8")//										+ 10000;//							} else {//								filter = filter//										+ URLEncoder.encode("|", "utf-8")//										+ "dayprice_section:" + (i - 1) * 50//										+ URLEncoder.encode(",", "utf-8") + i//										* 50;//							}////							break;//						}//					}//				}////				if (s3.getSelectedItemPosition() > 0) {//					String s3String = s3.getSelectedItem().toString();//					String[] categoryArray = context.getResources()//							.getStringArray(R.array.events_period_name);//					for (int i = 0; i < categoryArray.length; i++) {//						if (s3String.equals(categoryArray[i])) {//							filter = filter + URLEncoder.encode("|", "utf-8")//									+ "leasetype_section:" + i//									+ URLEncoder.encode(",", "utf-8") + i;//							break;//						}//					}//				}//			////			map.put("filter", filter);////		} catch (UnsupportedEncodingException e) {//			// TODO Auto-generated catch block//			e.printStackTrace();//		} catch (NotFoundException e) {//			// TODO Auto-generated catch block//			e.printStackTrace();//		}////		//DemoApplication.getInstance().setFilterParams(map);////		return map;//	}		private class PostMessageTask extends AsyncTask<Void, Void, ResponseEntity<Huodong>> {		private MultiValueMap<String, Object > message;		@Override		protected void onPreExecute() {			showLoadingProgressDialog();			// assemble the map			message = new LinkedMultiValueMap<String, Object>();			message.add("huodongType", HomeFragment.this.eventPeriod.getText());//		    message.add("huodongType", s2.getSelectedItem().toString());//		    message.add("huodongType", s3.getSelectedItem().toString());		    			//Resource resource = new ClassPathResource("res/drawable/spring09_logo.png");					//	message.add("file", resource);						}				@Override		protected ResponseEntity<Huodong>  doInBackground(Void... params) {			try {				// The URL for making the POST request				final String url = getString(R.string.base_uri) + "/gethuodongList";				// The URL for making the GET request				//final String url = "http://search.twitter.com/search.json?q={query}&rpp=100";				// Add the gzip Accept-Encoding header to the request				HttpHeaders requestHeaders = new HttpHeaders();				requestHeaders.setAcceptEncoding(ContentCodingType.GZIP);				// Sending multipart/form-data				requestHeaders.setContentType(MediaType.MULTIPART_FORM_DATA);				// Populate the MultiValueMap being serialized and headers in an HttpEntity object to use for the request				HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<MultiValueMap<String, Object>>(						message, requestHeaders);				// Create a new RestTemplate instance				RestTemplate restTemplate = new RestTemplate(true);				// Make the network request, posting the message, expecting a String in response from the server				ResponseEntity<Huodong> response = restTemplate.exchange(url, HttpMethod.POST, requestEntity,						Huodong.class);				return response;							} catch (Exception e) {				Log.d(this.toString(), e.getMessage(), e);			}			return null;		}		@Override		protected void onPostExecute(ResponseEntity<Huodong> huodong) {			dismissProgressDialog();			showResult("successfully get the huodong");		}	}		// ***************************************		// Private methods		// ***************************************		private void showResult(String result) {			if (result != null) {				// display a notification to the user with the response information				Toast.makeText(this.getActivity(), result, Toast.LENGTH_LONG).show();			} else {				Toast.makeText(this.getActivity(), "I got null, something happened!", Toast.LENGTH_LONG).show();			}		}				public void showProgressDialog(CharSequence message) {			if (this.progressDialog == null) {				this.progressDialog = new ProgressDialog(this.getActivity());				this.progressDialog.setIndeterminate(true);			}			this.progressDialog.setMessage(message);			this.progressDialog.show();		}		public void dismissProgressDialog() {			if (this.progressDialog != null) {				this.progressDialog.dismiss();			}		}		public void showLoadingProgressDialog() {			this.showProgressDialog("Loading. Please wait...");		}}